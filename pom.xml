<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.kvlt.cloud</groupId>
    <artifactId>microservice-simple</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring.version>4.3.6.RELEASE</spring.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
    </parent>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Camden.SR7</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <modules>
        <module>microservice-simple-provider-user</module>
        <module>microservice-simple-consumer-movie</module>
        <module>microservice-eureka-server</module>
        <module>microservice-eureka-client</module>
        <module>microservice-discovery-eureka</module>
        <module>microservice-ribbon</module>
        <module>microservice-feign</module>
        <module>microservice-consumer-movie-ribbon</module>
        <module>microservice-provider-user</module>
        <module>microservice-consumer-movie-ribbon-property-customizing</module>
        <module>microservice-consumer-movie-ribbon-without-eureka</module>
        <module>microservice-consumer-movie-feign</module>
        <module>microservice-consumer-movie-feign-configuration</module>
        <module>microservice-discovery-eureka-ha</module>
        <module>microservice-consumer-movie-ribbon-with-hystrix</module>
        <module>microservice-consumer-movie-ribbon-with-hystrix-propagation</module>
        <module>microservice-consumer-movie-feign-with-hystrix</module>
        <module>microservice-consumer-movie-feign-configuration-hystrix</module>
        <module>microservice-hystrix-dashboard</module>
        <module>microservice-hystrix-turbine</module>
        <module>microservice-gateway-zuul</module>
        <module>microservice-gateway-zuul-reg-exp</module>
        <module>microservice-file-upload</module>
        <module>microservice-gateway-zuul-fallback</module>
        <module>microservice-sidecar</module>
        <module>microservice-gateway-zuul-filter</module>

        <module>config-learning/microservice-config-server</module>
        <module>config-learning/microservice-config-client</module>
        <module>config-learning/microservice-config-server-encrypt</module>
        <module>config-learning/microservice-config-server-encrypt-rsa</module>
        <module>config-learning/microservice-config-server-authc</module>
        <module>config-learning/microservice-config-client-authc</module>
        <module>config-learning/microservice-config-server-eureka</module>
        <module>config-learning/microservice-config-client-eureka</module>
    </modules>

    <repositories>
        <repository>
            <id>nexus</id>
            <name>Team Nexus Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>nexus</id>
            <name>Team Nexus Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/application*.yml</include>
                    <include>**/bootstrap*.yml</include>
                    <include>**/application*.properties</include>
                    <include>**/bootstrap*.properties</include>
                    <include>**.jks</include>
                    <include>**.properties</include>
                </includes>
            </resource>
        </resources>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

</project>